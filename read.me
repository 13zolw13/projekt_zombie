
API description:

User stories:
I want to display details about selected zombie (name and creation date);
I want to display items that this zombie has;
I want to see total value of zombie’s items in 3 currencies, PLN/EU/USD;
I want to add and remove items from the zombie;
I want to see a list of zombies (create/update/remove them also);


Guidelines:

The zombie can have a maximum of 5 items.
We use an external item exchange for our zombie (we pay for every request), the prices of items on the exchange are updated daily at 00:00 UTC and are in Polish zlotys. https://zombie-items-api.herokuapp.com/api/items
We use the NBP API to download daily exchange rates http://api.nbp.pl/api/exchangerates/tables/C/today/
Please take the RESTful approach or GraphQL - whatever you feel more comfortable with.



============================================================================================================

I used node.js, express, mongodb, to create this API. I did, unit tests in Moca. Manual tests in Postman.  

TO RUN API
To run api on local machine, create dotenv file, with mongoose uri =>> MONGO_URI =mongodb://localhost:27017/zombies .

ENDPOINTS
Zombies
get  /api/v1/zombies -> List of all zombies from db.
post  /api/v1/zombies -> Creating zombie, require name, then saveing to DB
patch  /api/v1/zombies/:id -> Editing zombie,  requiere name input. 
delete /api/v1/zombies/:id -> Deleting zombie

Zombie’s inventory
get /api/v1/zombies/:id/items -> Zombie inventory. List of all equipment, with sum value of inventory.   
patch /api/v1/zombies/:id/items/:itemId -> Adding item to inventory, its need itemId and name, checking if it is posible to add more items. 
delete /api/v1/zombies/:id/items/:itemId -> removeing item from inventory, deleting item from inventory. Its needs itemID;



//TODOs
Authentication and autorization jwt/passport
Sorting item in inventory;
Sorting zombies by value of loot, name, creation date.
Changeing schema, creating connection between zombies and itemslike Item: type: mongoose.Types.ObjectId > with , to  populate whit current price, when needed. 
adding length restriction of max items in model.
move to cache in items.js when getting current rates.  
hide math staff
ADD more validation
ADD more error handling functions
ADD db for storing archive of errors.
Data from NBP in case of no data( like server down for long time) eg on weekend should be dawmloady from other working day.  




